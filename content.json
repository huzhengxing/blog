{"meta":{"title":"爱折腾的Albert","subtitle":null,"description":null,"author":"Albert","url":"https://www.huzhengxing.com","root":"/"},"pages":[{"title":"","date":"2019-11-15T06:36:31.441Z","updated":"2019-11-15T06:34:31.304Z","comments":true,"path":"baidu_verify_TZrI09FYvF.html","permalink":"https://www.huzhengxing.com/baidu_verify_TZrI09FYvF.html","excerpt":"","text":""},{"title":"关于我","date":"2019-11-12T01:29:53.000Z","updated":"2019-11-14T11:39:57.733Z","comments":true,"path":"about/index.html","permalink":"https://www.huzhengxing.com/about/index.html","excerpt":"","text":"基本内容 姓名: 胡正兴"},{"title":"标签","date":"2019-11-12T01:29:56.000Z","updated":"2019-11-12T01:59:53.023Z","comments":true,"path":"tags/index.html","permalink":"https://www.huzhengxing.com/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-11-12T01:30:07.000Z","updated":"2019-11-12T02:00:16.818Z","comments":true,"path":"categories/index.html","permalink":"https://www.huzhengxing.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"MySql备份方式","slug":"MySql备份处理","date":"2019-11-16T14:09:37.000Z","updated":"2019-11-18T02:43:55.857Z","comments":true,"path":"2019/11/16/MySql备份处理/","link":"","permalink":"https://www.huzhengxing.com/2019/11/16/MySql%E5%A4%87%E4%BB%BD%E5%A4%84%E7%90%86/","excerpt":"1. Windows server定时备份 创建bat文件 编辑bat文件,加入执行脚本 123@echo offset \"Ymd=%date:~,4%%date:~5,2%%date:~8,2%\"[\"C:\\Program Files\\MySQL\\MySQL Server 5.5\\bin\\mysqldump\"] --opt -u [root] --password=[123456] [dbname] &gt; C:\\mysql_backup\\[dbname]_%Ymd%.sql@echo on","text":"1. Windows server定时备份 创建bat文件 编辑bat文件,加入执行脚本 123@echo offset \"Ymd=%date:~,4%%date:~5,2%%date:~8,2%\"[\"C:\\Program Files\\MySQL\\MySQL Server 5.5\\bin\\mysqldump\"] --opt -u [root] --password=[123456] [dbname] &gt; C:\\mysql_backup\\[dbname]_%Ymd%.sql@echo on ​ []里面都是需要按照个人修改 “C:\\Program Files\\MySQL\\MySQL Server 5.5\\bin\\mysqldump” 按照MySql的mysqldump文件所在位置 root 用户名 123456 密码 dbname 数据库名称 配置好后直接保存，点击运行，如果生成一个sql文件。那就成功了 添加window任务计划，执行该脚本。","categories":[{"name":"MySql","slug":"MySql","permalink":"https://www.huzhengxing.com/categories/MySql/"}],"tags":[{"name":"MySql","slug":"MySql","permalink":"https://www.huzhengxing.com/tags/MySql/"},{"name":"备份","slug":"备份","permalink":"https://www.huzhengxing.com/tags/%E5%A4%87%E4%BB%BD/"}]},{"title":"一次数据的误删除","slug":"一次数据的误删除","date":"2019-11-16T12:08:48.000Z","updated":"2019-11-18T02:09:26.840Z","comments":true,"path":"2019/11/16/一次数据的误删除/","link":"","permalink":"https://www.huzhengxing.com/2019/11/16/%E4%B8%80%E6%AC%A1%E6%95%B0%E6%8D%AE%E7%9A%84%E8%AF%AF%E5%88%A0%E9%99%A4/","excerpt":"1. 场景​ 今天在把测试数据库的表更新到正式数据库时，因为直接用了navicat，所以就直接把表复制过去，非常方便。但是，同时也把测试数据库里面的数据复制到了正式数据库，没办法只能手动删除。好了，精彩时刻来了，由于两个表名字有点相似，居然删错表里面的数据，一个是canteen_recharge_record，我新添加的库是canteen_subscribe_record，一个单词之差，看走眼了。直接把canteen_recharge_record里面的数据全删了。瞬间头皮发麻。","text":"1. 场景​ 今天在把测试数据库的表更新到正式数据库时，因为直接用了navicat，所以就直接把表复制过去，非常方便。但是，同时也把测试数据库里面的数据复制到了正式数据库，没办法只能手动删除。好了，精彩时刻来了，由于两个表名字有点相似，居然删错表里面的数据，一个是canteen_recharge_record，我新添加的库是canteen_subscribe_record，一个单词之差，看走眼了。直接把canteen_recharge_record里面的数据全删了。瞬间头皮发麻。 ​ 2. 解决过程​ 第一反应，就是去数据库查看备份的数据，虽然只有一天一次备份。起码还可以把今天之前的数据能找回来。一打开备份的文件夹，一脸懵逼，从9月29号之后。数据库居然没有备份了，都是1KB。我了个去。什么情况？再仔细一想，由于公司人员增加，之前就是有人乱改了数据库，所以现在统一把账号，密码修改了，分为正式的和测试，然而，备份配置的账号密码，还是之前的，瞬间完蛋。 ​ 没办法，那就只能直接百度，Google，一顿搜索，各种尝试。结果就是，针对于MySql恢复数据,基本上就是通过备份，或者通过binlog，这两个我都没有。之间还在淘宝搜索，还真有恢复的。找了一家打电话联系后说了一下情况，直接说，无法恢复。 ​ 一个喜欢贼习惯看吾爱破解的同事，想出了一个办法。说通过恢复文件的方式，因为数据库数据最终还是保存在本地磁盘，可以通过文件恢复，感觉还是有点道理。一顿操作后，发现都是需要花钱的恢复文件，而且一般的恢复文件都是恢复删除的文件，我们在本地数据库测试的时候发现，删除表的数据库，只是修改了文件，并没有删除。除非能让数据回滚到某一个时间段。 ​ 因为我们是用的阿里云服务器，所以想到了阿里快照，因为我们之前服务器被黑过，所以了解到了云服务器的快照。登录阿里云之后，发现就是上次快照了一次，尴尬。 ​ 事到至此，只能先和客户那边沟通。沟通之后，发现这部分的数据不是特别重要，只是充值记录。偶尔为了，确认一下比人充值了没，才会去看下。瞬间安心了好多。 ​ 但是，部分数据库还是得找回来。只能用一个死办法了，通过日志来找回数据库。花花的好几个G的日志文件。 ​ 哎，真的是手贱，太粗心了。 3. 吸取教训 数据库的备份做好，而且确保能用，最好能偶尔查看一下。这里的备份中间出问题，就是，没去看是否备份成功。 服务器做好快照，不仅是数据库的问题，服务器也是一样，万一不小心输入了rm rf /*,那是真的GG了 操作正式数据库之前，一定得手动备份一次。以免误操作数据。","categories":[{"name":"个人经历","slug":"个人经历","permalink":"https://www.huzhengxing.com/categories/%E4%B8%AA%E4%BA%BA%E7%BB%8F%E5%8E%86/"}],"tags":[{"name":"MySql","slug":"MySql","permalink":"https://www.huzhengxing.com/tags/MySql/"},{"name":"数据库","slug":"数据库","permalink":"https://www.huzhengxing.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"Git使用命令","slug":"Git使用命令","date":"2019-11-14T02:09:37.000Z","updated":"2019-11-18T02:09:23.601Z","comments":true,"path":"2019/11/14/Git使用命令/","link":"","permalink":"https://www.huzhengxing.com/2019/11/14/Git%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"Git相关的操作命令1. 下载代码github代码下载到本地。1git clone https://github.com/huzhengxing/spring-cloud-demo.git2. 拉取代码远程仓库代码，更新到本地。1git pull3. 上传代码本地已经git commit文件上传的远程仓库。(先git pull,再git push)","text":"Git相关的操作命令1. 下载代码github代码下载到本地。1git clone https://github.com/huzhengxing/spring-cloud-demo.git2. 拉取代码远程仓库代码，更新到本地。1git pull3. 上传代码本地已经git commit文件上传的远程仓库。(先git pull,再git push) 1git push 4. 提交代码本地1git commit -m \"备注\" 5. 查看本地提交的代码1git status 6. 删除本地仓库代码已经git commit 的文件 1git rm -r --cached [fileName] 7. 查看分支1git branch 8. 创建分支1git branch [branchName] 9. 添加远程仓库远程已经创建仓库,本地代码同步到远程仓库。 1git remote add origin [远程地址] 10. 添加远程分支本地代码同步到远程仓库，添加分支，才能提交上传代码。 1git pull origin master","categories":[{"name":"Git","slug":"Git","permalink":"https://www.huzhengxing.com/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://www.huzhengxing.com/tags/Git/"}]},{"title":"Springboot整合Websocket","slug":"Springboot整合Websocket","date":"2019-11-13T02:09:37.000Z","updated":"2019-11-18T02:09:25.752Z","comments":true,"path":"2019/11/13/Springboot整合Websocket/","link":"","permalink":"https://www.huzhengxing.com/2019/11/13/Springboot%E6%95%B4%E5%90%88Websocket/","excerpt":"springboot整合websocket,实现即使通讯的一对一单聊。1. 导入相关依赖12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.11&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;tk.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.komlin&lt;/groupId&gt; &lt;artifactId&gt;common&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;!--swagger2--&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;2.9.2&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;io.swagger&lt;/groupId&gt; &lt;artifactId&gt;swagger-annotations&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;exclusion&gt; &lt;groupId&gt;io.swagger&lt;/groupId&gt; &lt;artifactId&gt;swagger-models&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;2.7.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.swagger&lt;/groupId&gt; &lt;artifactId&gt;swagger-annotations&lt;/artifactId&gt; &lt;version&gt;1.5.21&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.swagger&lt;/groupId&gt; &lt;artifactId&gt;swagger-models&lt;/artifactId&gt; &lt;version&gt;1.5.21&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt; &lt;version&gt;1.5.17.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-lang&lt;/groupId&gt; &lt;artifactId&gt;commons-lang&lt;/artifactId&gt; &lt;version&gt;2.6&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt;","text":"springboot整合websocket,实现即使通讯的一对一单聊。1. 导入相关依赖12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.11&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;tk.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.komlin&lt;/groupId&gt; &lt;artifactId&gt;common&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;!--swagger2--&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;2.9.2&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;io.swagger&lt;/groupId&gt; &lt;artifactId&gt;swagger-annotations&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;exclusion&gt; &lt;groupId&gt;io.swagger&lt;/groupId&gt; &lt;artifactId&gt;swagger-models&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;2.7.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.swagger&lt;/groupId&gt; &lt;artifactId&gt;swagger-annotations&lt;/artifactId&gt; &lt;version&gt;1.5.21&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.swagger&lt;/groupId&gt; &lt;artifactId&gt;swagger-models&lt;/artifactId&gt; &lt;version&gt;1.5.21&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt; &lt;version&gt;1.5.17.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-lang&lt;/groupId&gt; &lt;artifactId&gt;commons-lang&lt;/artifactId&gt; &lt;version&gt;2.6&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 这里用的是1.5.17.RELEASE版本的websocket,之前用了2.0.4RELEASE版本存在问题 2. 配置ServerEndpoint注入Spring将ServerEndpointExporter类注入到spring容器,处理@ServerEndpoint注解的实现类 12345678@Configurationpublic class WSConfig &#123; @Bean public ServerEndpointExporter serverEndpointExporter() &#123; return new ServerEndpointExporter(); &#125;&#125; 3. 实现类这里可以处理我们需要的逻辑,这里简单的实现了一个一对一单聊 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283@ServerEndpoint(value = \"/websocket/&#123;userId&#125;\")@Slf4j@Componentpublic class WSController &#123; private static ConcurrentHashMap&lt;String, Session&gt; onlineUsers = new ConcurrentHashMap&lt;&gt;(); /** * 开始连接时，调用 * @param session * @param userId */ @OnOpen public void onOpen(Session session, @PathParam(\"userId\") String userId) &#123; log.info(\"进入:&#123;&#125;\",\"onOpen\"); log.info(\"userId:&#123;&#125;\",userId); if (onlineUsers.get(userId) != null ) &#123; sendMessage(session,\"您已经在线!\"); return; &#125; onlineUsers.put(userId,session); printOnlineUserSize(); &#125; /** * 关闭连接时调用 * @param session */ @OnClose public void onClose(Session session) &#123; onlineUsers.forEach((k,v) -&gt; &#123; if (v.getId().equals(session.getId())) &#123; log.info(\"有人下线了:&#123;&#125;\",k); onlineUsers.remove(k); &#125; &#125;); printOnlineUserSize(); log.info(\"进入:&#123;&#125;\",\"onClose\"); &#125; /** * 接收客户端的消息 * @param session * @param message */ @OnMessage public void onMessage(Session session,String message) &#123; log.info(\"进入:&#123;&#125;\",\"onMessage\"); log.info(\"message:&#123;&#125;\",message); Message messageObject = JsonUtils.jsonToPojo(message, Message.class); Session sessionOfFriend = onlineUsers.get(messageObject.getFriendUserId()); if (sessionOfFriend != null) &#123; sendMessage(sessionOfFriend,messageObject.getText()); &#125; &#125; /** * 报错时调用 * @param session * @param throwable */ @OnError public void onError(Session session,Throwable throwable) &#123; log.info(\"进入:&#123;&#125;\",\"onError\"); &#125; /** * 向客服端发送消息 * @param session * @param message */ private void sendMessage(Session session,String message) &#123; try &#123; session.getBasicRemote().sendText(message); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; private void printOnlineUserSize() &#123; log.info(\"当前在线人数:&#123;&#125;\",onlineUsers.size()); &#125;&#125;","categories":[{"name":"IM","slug":"IM","permalink":"https://www.huzhengxing.com/categories/IM/"}],"tags":[{"name":"springboot","slug":"springboot","permalink":"https://www.huzhengxing.com/tags/springboot/"},{"name":"websocket","slug":"websocket","permalink":"https://www.huzhengxing.com/tags/websocket/"},{"name":"im","slug":"im","permalink":"https://www.huzhengxing.com/tags/im/"}]}]}